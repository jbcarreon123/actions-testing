name: Issue Comment Commands

on:
  issue_comment:
    types:
      - created

jobs:
  process_comment:
    runs-on: ubuntu-latest

    steps:
      - name: Check if comment contains commands
        id: parse-comment
        run: |
          comment_body=$(jq -r .comment.body $GITHUB_EVENT_PATH)
          if [[ "$comment_body" =~ ^/close\ (cp|np)?$ ]]; then
            command="close"
            option="${BASH_REMATCH[1]}"
          elif [[ "$comment_body" =~ ^/ban\ (.+)\ (all)?$ ]]; then
            command="ban"
            username="${BASH_REMATCH[1]}"
            all="${BASH_REMATCH[2]}"
          elif [[ "$comment_body" =~ ^/milestone\ (.+)?$ ]]; then
            command="milestone"
            milestone="${BASH_REMATCH[1]}"
          fi
          echo "::set-output name=command::$command"
          echo "::set-output name=option::$option"
          echo "::set-output name=username::$username"
          echo "::set-output name=all::$all"
          echo "::set-output name=milestone::$milestone"
        shell: bash

      - name: Perform actions based on commands
        if: steps.parse-comment.outputs.command
        run: |
          token="${{ secrets.GITHUB_TOKEN }}"
          issue_number=$(jq -r .issue.number $GITHUB_EVENT_PATH)
          repo_owner=$(jq -r .repository.owner.login $GITHUB_EVENT_PATH)
          repo_name=$(jq -r .repository.name $GITHUB_EVENT_PATH)

          case "${{ steps.parse-comment.outputs.command }}" in
            "close")
              if [[ "${{ steps.parse-comment.outputs.option }}" == "cp" ]]; then
                echo "Closing issue $issue_number as completed"
                # Close the issue as completed by adding a comment or changing the issue status
                curl -X POST "https://api.github.com/repos/$repo_owner/$repo_name/issues/$issue_number" -H "Authorization: token $token" -d "{\"state\": \"closed\", \"state_reason\": \"completed\"}"
                curl -X POST "https://api.github.com/repos/$repo_owner/$repo_name/issues/$issue_number/comments" -H "Authorization: token $token" -d "{\"body\": \"Issue closed as completed.\"}"
              elif [[ "${{ steps.parse-comment.outputs.option }}" == "np" ]]; then
                echo "Closing issue $issue_number as not planned"
                # Close the issue as not planned by adding a comment or changing the issue status
                curl -X POST "https://api.github.com/repos/$repo_owner/$repo_name/issues/$issue_number" -H "Authorization: token $token" -d "{\"state\": \"closed\", \"state_reason\": \"not_planned\"}"
                curl -X POST "https://api.github.com/repos/$repo_owner/$repo_name/issues/$issue_number/comments" -H "Authorization: token $token" -d "{\"body\": \"Issue closed as not planned.\"}"
              else
                echo "Invalid option for /close command"
              fi
              ;;
            "ban")
              if [[ "${{ steps.parse-comment.outputs.all }}" == "all" ]]; then
                echo "Banning ${{ steps.parse-comment.outputs.username }} on all repositories of $repo_owner"
                # Implement logic to ban the user on all repositories of the repo owner
                # Example: You can use the GitHub REST API to perform this action.
                # Replace 'USERNAME_TO_BAN' with the actual username.
                curl -X PUT "https://api.github.com/repos/$repo_owner/$repo_name/interaction-limits/USERNAME_TO_BAN" -H "Authorization: token $token" -d "{\"limit\": \"limited\", \"org\": \"false\"}"
              else
                echo "Banning ${{ steps.parse-comment.outputs.username }}"
                # Implement logic to ban the user on the current repository
                # Example: You can use the GitHub REST API to perform this action.
                # Replace 'USERNAME_TO_BAN' with the actual username.
                curl -X PUT "https://api.github.com/repos/$repo_owner/$repo_name/interaction-limits/USERNAME_TO_BAN" -H "Authorization: token $token" -d "{\"limit\": \"limited\", \"org\": \"false\"}"
              fi
              ;;
            "milestone")
              if [[ "${{ steps.parse-comment.outputs.milestone }}" ]]; then
                echo "Adding issue $issue_number to milestone ${{ steps.parse-comment.outputs.milestone }}"
                # Implement logic to add the issue to the specified milestone
                # Example: You can use the GitHub REST API to perform this action.
                # Replace 'MILESTONE_NAME' with the actual milestone name.
                curl -X POST "https://api.github.com/repos/$repo_owner/$repo_name/issues/$issue_number/milestones" -H "Authorization: token $token" -d "{\"milestone\": MILESTONE_NAME}"
              else
                echo "Removing issue $issue_number from milestone"
                # Implement logic to remove the issue from the milestone
                # Example: You can use the GitHub REST API to perform this action.
                curl -X DELETE "https://api.github.com/repos/$repo_owner/$repo_name/issues/$issue_number/milestones" -H "Authorization: token $token"
              fi
              ;;
            *)
              echo "Unknown command"
              ;;
          esac
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
